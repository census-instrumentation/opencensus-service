// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opencensus/proto/exporter/exporter.proto

/*
Package exporterproto is a generated protocol buffer package.

It is generated from these files:
	opencensus/proto/exporter/exporter.proto

It has these top-level messages:
	ExportSpanRequest
	ExportSpanResponse
	ExportMetricsRequest
	ExportMetricsResponse
*/
package exporterproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import opencensus_proto_trace "github.com/census-instrumentation/opencensus-proto/gen-go/traceproto"
import opencensus_proto_stats_metrics "github.com/census-instrumentation/opencensus-proto/gen-go/statsproto/metricsproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExportSpanRequest struct {
	Spans []*opencensus_proto_trace.Span `protobuf:"bytes,1,rep,name=spans" json:"spans,omitempty"`
}

func (m *ExportSpanRequest) Reset()                    { *m = ExportSpanRequest{} }
func (m *ExportSpanRequest) String() string            { return proto.CompactTextString(m) }
func (*ExportSpanRequest) ProtoMessage()               {}
func (*ExportSpanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExportSpanRequest) GetSpans() []*opencensus_proto_trace.Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

type ExportSpanResponse struct {
}

func (m *ExportSpanResponse) Reset()                    { *m = ExportSpanResponse{} }
func (m *ExportSpanResponse) String() string            { return proto.CompactTextString(m) }
func (*ExportSpanResponse) ProtoMessage()               {}
func (*ExportSpanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ExportMetricsRequest struct {
	Metrics []*opencensus_proto_stats_metrics.Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *ExportMetricsRequest) Reset()                    { *m = ExportMetricsRequest{} }
func (m *ExportMetricsRequest) String() string            { return proto.CompactTextString(m) }
func (*ExportMetricsRequest) ProtoMessage()               {}
func (*ExportMetricsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExportMetricsRequest) GetMetrics() []*opencensus_proto_stats_metrics.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type ExportMetricsResponse struct {
}

func (m *ExportMetricsResponse) Reset()                    { *m = ExportMetricsResponse{} }
func (m *ExportMetricsResponse) String() string            { return proto.CompactTextString(m) }
func (*ExportMetricsResponse) ProtoMessage()               {}
func (*ExportMetricsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*ExportSpanRequest)(nil), "opencensus.proto.exporter.ExportSpanRequest")
	proto.RegisterType((*ExportSpanResponse)(nil), "opencensus.proto.exporter.ExportSpanResponse")
	proto.RegisterType((*ExportMetricsRequest)(nil), "opencensus.proto.exporter.ExportMetricsRequest")
	proto.RegisterType((*ExportMetricsResponse)(nil), "opencensus.proto.exporter.ExportMetricsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Export service

type ExportClient interface {
	ExportSpan(ctx context.Context, opts ...grpc.CallOption) (Export_ExportSpanClient, error)
	ExportMetrics(ctx context.Context, opts ...grpc.CallOption) (Export_ExportMetricsClient, error)
}

type exportClient struct {
	cc *grpc.ClientConn
}

func NewExportClient(cc *grpc.ClientConn) ExportClient {
	return &exportClient{cc}
}

func (c *exportClient) ExportSpan(ctx context.Context, opts ...grpc.CallOption) (Export_ExportSpanClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Export_serviceDesc.Streams[0], c.cc, "/opencensus.proto.exporter.Export/ExportSpan", opts...)
	if err != nil {
		return nil, err
	}
	x := &exportExportSpanClient{stream}
	return x, nil
}

type Export_ExportSpanClient interface {
	Send(*ExportSpanRequest) error
	Recv() (*ExportSpanResponse, error)
	grpc.ClientStream
}

type exportExportSpanClient struct {
	grpc.ClientStream
}

func (x *exportExportSpanClient) Send(m *ExportSpanRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exportExportSpanClient) Recv() (*ExportSpanResponse, error) {
	m := new(ExportSpanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportClient) ExportMetrics(ctx context.Context, opts ...grpc.CallOption) (Export_ExportMetricsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Export_serviceDesc.Streams[1], c.cc, "/opencensus.proto.exporter.Export/ExportMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &exportExportMetricsClient{stream}
	return x, nil
}

type Export_ExportMetricsClient interface {
	Send(*ExportMetricsRequest) error
	Recv() (*ExportMetricsResponse, error)
	grpc.ClientStream
}

type exportExportMetricsClient struct {
	grpc.ClientStream
}

func (x *exportExportMetricsClient) Send(m *ExportMetricsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exportExportMetricsClient) Recv() (*ExportMetricsResponse, error) {
	m := new(ExportMetricsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Export service

type ExportServer interface {
	ExportSpan(Export_ExportSpanServer) error
	ExportMetrics(Export_ExportMetricsServer) error
}

func RegisterExportServer(s *grpc.Server, srv ExportServer) {
	s.RegisterService(&_Export_serviceDesc, srv)
}

func _Export_ExportSpan_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExportServer).ExportSpan(&exportExportSpanServer{stream})
}

type Export_ExportSpanServer interface {
	Send(*ExportSpanResponse) error
	Recv() (*ExportSpanRequest, error)
	grpc.ServerStream
}

type exportExportSpanServer struct {
	grpc.ServerStream
}

func (x *exportExportSpanServer) Send(m *ExportSpanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exportExportSpanServer) Recv() (*ExportSpanRequest, error) {
	m := new(ExportSpanRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Export_ExportMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExportServer).ExportMetrics(&exportExportMetricsServer{stream})
}

type Export_ExportMetricsServer interface {
	Send(*ExportMetricsResponse) error
	Recv() (*ExportMetricsRequest, error)
	grpc.ServerStream
}

type exportExportMetricsServer struct {
	grpc.ServerStream
}

func (x *exportExportMetricsServer) Send(m *ExportMetricsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exportExportMetricsServer) Recv() (*ExportMetricsRequest, error) {
	m := new(ExportMetricsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Export_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opencensus.proto.exporter.Export",
	HandlerType: (*ExportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExportSpan",
			Handler:       _Export_ExportSpan_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ExportMetrics",
			Handler:       _Export_ExportMetrics_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "opencensus/proto/exporter/exporter.proto",
}

func init() { proto.RegisterFile("opencensus/proto/exporter/exporter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcf, 0x4a, 0xf3, 0x40,
	0x10, 0xff, 0xc2, 0x87, 0x15, 0x46, 0x3c, 0xb8, 0x54, 0xd4, 0xd0, 0x83, 0xe4, 0x20, 0x3d, 0x34,
	0xbb, 0xa5, 0xbe, 0x80, 0x14, 0xa4, 0x27, 0xa1, 0xd4, 0x8b, 0x78, 0x4b, 0xc3, 0x10, 0x73, 0xc8,
	0xee, 0xba, 0x3b, 0x81, 0xbc, 0xb7, 0x2f, 0x20, 0xee, 0x24, 0x4d, 0x6b, 0x28, 0xf6, 0x92, 0x09,
	0xbf, 0xfc, 0xfe, 0x65, 0x18, 0x98, 0x1a, 0x8b, 0x3a, 0x47, 0xed, 0x6b, 0xaf, 0xac, 0x33, 0x64,
	0x14, 0x36, 0xd6, 0x38, 0x42, 0xb7, 0x7b, 0x91, 0x01, 0x17, 0x77, 0x3d, 0x93, 0x11, 0xd9, 0x11,
	0xe2, 0x64, 0x60, 0x42, 0x2e, 0xcb, 0x91, 0x9f, 0x4c, 0x8e, 0x67, 0x03, 0x8e, 0xa7, 0x8c, 0xbc,
	0xaa, 0x90, 0x5c, 0x99, 0xef, 0x26, 0xb3, 0x93, 0x15, 0x5c, 0x3d, 0x07, 0xf7, 0x57, 0x9b, 0xe9,
	0x0d, 0x7e, 0xd6, 0xe8, 0x49, 0x2c, 0xe0, 0xcc, 0xdb, 0x4c, 0xfb, 0xdb, 0xe8, 0xfe, 0xff, 0xf4,
	0x62, 0x31, 0x91, 0x83, 0x46, 0x1c, 0x18, 0x34, 0x4c, 0x4d, 0xc6, 0x20, 0xf6, 0x8d, 0xbc, 0x35,
	0xda, 0x63, 0xf2, 0x06, 0x63, 0x46, 0x5f, 0x38, 0xb5, 0x4b, 0x78, 0x82, 0xf3, 0xb6, 0x47, 0x9b,
	0xf1, 0x30, 0xcc, 0x08, 0xb5, 0x65, 0x57, 0x97, 0x0d, 0x36, 0x9d, 0x2c, 0xb9, 0x81, 0xeb, 0x5f,
	0xce, 0x1c, 0xb9, 0xf8, 0x8a, 0x60, 0xc4, 0x5f, 0x84, 0x01, 0xe8, 0x3b, 0x89, 0x99, 0x3c, 0xba,
	0x58, 0x39, 0xd8, 0x41, 0x9c, 0x9e, 0xc8, 0x6e, 0x7f, 0xf4, 0xdf, 0x34, 0x9a, 0x47, 0xa2, 0x81,
	0xcb, 0x83, 0x52, 0x42, 0xfd, 0xe9, 0x72, 0xb8, 0x98, 0x78, 0x7e, 0xba, 0x60, 0x3f, 0x79, 0xd9,
	0xc0, 0xa4, 0x34, 0xc7, 0xb5, 0xcb, 0xb6, 0x17, 0xba, 0xf5, 0x0f, 0xbe, 0x8e, 0xde, 0x57, 0x45,
	0x49, 0x1f, 0xf5, 0x56, 0xe6, 0xa6, 0x52, 0x2c, 0x49, 0x4b, 0xed, 0xc9, 0xd5, 0x15, 0x6a, 0xca,
	0xa8, 0x34, 0x5a, 0xf5, 0x6e, 0x29, 0x1f, 0x52, 0x81, 0x3a, 0x2d, 0xfa, 0xc3, 0x0d, 0xe0, 0x76,
	0x14, 0xc6, 0xe3, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0x53, 0x94, 0xb0, 0xe1, 0x02, 0x00,
	0x00,
}
