// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opencensus/proto/stats/stats.proto

/*
Package statsproto is a generated protocol buffer package.

It is generated from these files:
	opencensus/proto/stats/stats.proto

It has these top-level messages:
	Tag
	Measure
	View
	CountAggregation
	SumAggregation
	LastValueAggregation
	DistributionAggregation
	Measurement
*/
package statsproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Measure_Type int32

const (
	// Unknown type.
	Measure_TYPE_UNSPECIFIED Measure_Type = 0
	// Indicates an int64 Measure.
	Measure_INT64 Measure_Type = 1
	// Indicates a double Measure.
	Measure_DOUBLE Measure_Type = 2
)

var Measure_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "INT64",
	2: "DOUBLE",
}
var Measure_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"INT64":            1,
	"DOUBLE":           2,
}

func (x Measure_Type) String() string {
	return proto.EnumName(Measure_Type_name, int32(x))
}
func (Measure_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// TODO(bdrutu): Consider if this should be moved to a "tags" directory to match the API structure.
type Tag struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Tag) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Tag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Measure .
type Measure struct {
	// A string by which the measure will be referred to, e.g. "rpc_server_latency". Names MUST be
	// unique within the library.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Describes the measure, e.g. "RPC latency in seconds".
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Describes the unit used for the Measure. Follows the format described by
	// http://unitsofmeasure.org/ucum.html.
	Unit string `protobuf:"bytes,3,opt,name=unit" json:"unit,omitempty"`
	// The type used for this Measure.
	Type Measure_Type `protobuf:"varint,4,opt,name=type,enum=opencensus.proto.stats.Measure_Type" json:"type,omitempty"`
}

func (m *Measure) Reset()                    { *m = Measure{} }
func (m *Measure) String() string            { return proto.CompactTextString(m) }
func (*Measure) ProtoMessage()               {}
func (*Measure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Measure) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Measure) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Measure) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *Measure) GetType() Measure_Type {
	if m != nil {
		return m.Type
	}
	return Measure_TYPE_UNSPECIFIED
}

type View struct {
	// A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
	// within the library.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Describes the view, e.g. "RPC latency distribution"
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// The Measure to which this view is applied.
	Measure *Measure `protobuf:"bytes,3,opt,name=measure" json:"measure,omitempty"`
	// An array of tag keys. These values associated with tags of this name form the basis by which
	// individual stats will be aggregated (one aggregation per unique tag value). If none are
	// provided, then all data is recorded in a single aggregation.
	Columns []string `protobuf:"bytes,4,rep,name=columns" json:"columns,omitempty"`
	// The description of the aggregation used for this view which describes how data collected are
	// aggregated.
	//
	// Types that are valid to be assigned to Aggregation:
	//	*View_CountAggregation
	//	*View_SumAggregation
	//	*View_LastValueAggregation
	//	*View_DistributionAggregation
	Aggregation isView_Aggregation `protobuf_oneof:"aggregation"`
}

func (m *View) Reset()                    { *m = View{} }
func (m *View) String() string            { return proto.CompactTextString(m) }
func (*View) ProtoMessage()               {}
func (*View) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isView_Aggregation interface {
	isView_Aggregation()
}

type View_CountAggregation struct {
	CountAggregation *CountAggregation `protobuf:"bytes,5,opt,name=count_aggregation,json=countAggregation,oneof"`
}
type View_SumAggregation struct {
	SumAggregation *SumAggregation `protobuf:"bytes,6,opt,name=sum_aggregation,json=sumAggregation,oneof"`
}
type View_LastValueAggregation struct {
	LastValueAggregation *LastValueAggregation `protobuf:"bytes,7,opt,name=last_value_aggregation,json=lastValueAggregation,oneof"`
}
type View_DistributionAggregation struct {
	DistributionAggregation *DistributionAggregation `protobuf:"bytes,8,opt,name=distribution_aggregation,json=distributionAggregation,oneof"`
}

func (*View_CountAggregation) isView_Aggregation()        {}
func (*View_SumAggregation) isView_Aggregation()          {}
func (*View_LastValueAggregation) isView_Aggregation()    {}
func (*View_DistributionAggregation) isView_Aggregation() {}

func (m *View) GetAggregation() isView_Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *View) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *View) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *View) GetMeasure() *Measure {
	if m != nil {
		return m.Measure
	}
	return nil
}

func (m *View) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *View) GetCountAggregation() *CountAggregation {
	if x, ok := m.GetAggregation().(*View_CountAggregation); ok {
		return x.CountAggregation
	}
	return nil
}

func (m *View) GetSumAggregation() *SumAggregation {
	if x, ok := m.GetAggregation().(*View_SumAggregation); ok {
		return x.SumAggregation
	}
	return nil
}

func (m *View) GetLastValueAggregation() *LastValueAggregation {
	if x, ok := m.GetAggregation().(*View_LastValueAggregation); ok {
		return x.LastValueAggregation
	}
	return nil
}

func (m *View) GetDistributionAggregation() *DistributionAggregation {
	if x, ok := m.GetAggregation().(*View_DistributionAggregation); ok {
		return x.DistributionAggregation
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*View) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _View_OneofMarshaler, _View_OneofUnmarshaler, _View_OneofSizer, []interface{}{
		(*View_CountAggregation)(nil),
		(*View_SumAggregation)(nil),
		(*View_LastValueAggregation)(nil),
		(*View_DistributionAggregation)(nil),
	}
}

func _View_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*View)
	// aggregation
	switch x := m.Aggregation.(type) {
	case *View_CountAggregation:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CountAggregation); err != nil {
			return err
		}
	case *View_SumAggregation:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SumAggregation); err != nil {
			return err
		}
	case *View_LastValueAggregation:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LastValueAggregation); err != nil {
			return err
		}
	case *View_DistributionAggregation:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionAggregation); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("View.Aggregation has unexpected type %T", x)
	}
	return nil
}

func _View_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*View)
	switch tag {
	case 5: // aggregation.count_aggregation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CountAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &View_CountAggregation{msg}
		return true, err
	case 6: // aggregation.sum_aggregation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SumAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &View_SumAggregation{msg}
		return true, err
	case 7: // aggregation.last_value_aggregation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LastValueAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &View_LastValueAggregation{msg}
		return true, err
	case 8: // aggregation.distribution_aggregation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DistributionAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &View_DistributionAggregation{msg}
		return true, err
	default:
		return false, nil
	}
}

func _View_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*View)
	// aggregation
	switch x := m.Aggregation.(type) {
	case *View_CountAggregation:
		s := proto.Size(x.CountAggregation)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *View_SumAggregation:
		s := proto.Size(x.SumAggregation)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *View_LastValueAggregation:
		s := proto.Size(x.LastValueAggregation)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *View_DistributionAggregation:
		s := proto.Size(x.DistributionAggregation)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CountAggregation struct {
}

func (m *CountAggregation) Reset()                    { *m = CountAggregation{} }
func (m *CountAggregation) String() string            { return proto.CompactTextString(m) }
func (*CountAggregation) ProtoMessage()               {}
func (*CountAggregation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SumAggregation struct {
}

func (m *SumAggregation) Reset()                    { *m = SumAggregation{} }
func (m *SumAggregation) String() string            { return proto.CompactTextString(m) }
func (*SumAggregation) ProtoMessage()               {}
func (*SumAggregation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type LastValueAggregation struct {
}

func (m *LastValueAggregation) Reset()                    { *m = LastValueAggregation{} }
func (m *LastValueAggregation) String() string            { return proto.CompactTextString(m) }
func (*LastValueAggregation) ProtoMessage()               {}
func (*LastValueAggregation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DistributionAggregation struct {
	// A Distribution may optionally contain a histogram of the values in the
	// population. The bucket boundaries for that histogram are described by
	// `bucket_bounds`. This defines `size(bucket_bounds) + 1` (= N)
	// buckets. The boundaries for bucket index i are:
	//
	// (-infinity, bucket_bounds[i]) for i == 0
	// [bucket_bounds[i-1], bucket_bounds[i]) for 0 < i < N-2
	// [bucket_bounds[i-1], +infinity) for i == N-1
	//
	// i.e. an underflow bucket (number 0), zero or more finite buckets (1
	// through N - 2, and an overflow bucket (N - 1), with inclusive lower
	// bounds and exclusive upper bounds.
	//
	// If `bucket_bounds` has no elements (zero size), then there is no
	// histogram associated with the Distribution. If `bucket_bounds` has only
	// one element, there are no finite buckets, and that single element is the
	// common boundary of the overflow and underflow buckets. The values must
	// be monotonically increasing.
	BucketBounds []float64 `protobuf:"fixed64,1,rep,packed,name=bucket_bounds,json=bucketBounds" json:"bucket_bounds,omitempty"`
}

func (m *DistributionAggregation) Reset()                    { *m = DistributionAggregation{} }
func (m *DistributionAggregation) String() string            { return proto.CompactTextString(m) }
func (*DistributionAggregation) ProtoMessage()               {}
func (*DistributionAggregation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DistributionAggregation) GetBucketBounds() []float64 {
	if m != nil {
		return m.BucketBounds
	}
	return nil
}

// Describes a data point to be collected for a Measure.
type Measurement struct {
	Tags []*Tag `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	// The name of the measure to which the value is applied.
	MeasureName string `protobuf:"bytes,2,opt,name=measure_name,json=measureName" json:"measure_name,omitempty"`
	// The recorded value, MUST have the appropriate type to match the Measure.
	//
	// Types that are valid to be assigned to Value:
	//	*Measurement_DoubleValue
	//	*Measurement_IntValue
	Value isMeasurement_Value `protobuf_oneof:"value"`
	// The time when this measurement was recorded. If the implementation uses a async buffer to
	// record measurements this may be the time when the measurement was read from the buffer.
	Time *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=time" json:"time,omitempty"`
}

func (m *Measurement) Reset()                    { *m = Measurement{} }
func (m *Measurement) String() string            { return proto.CompactTextString(m) }
func (*Measurement) ProtoMessage()               {}
func (*Measurement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isMeasurement_Value interface {
	isMeasurement_Value()
}

type Measurement_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"`
}
type Measurement_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,oneof"`
}

func (*Measurement_DoubleValue) isMeasurement_Value() {}
func (*Measurement_IntValue) isMeasurement_Value()    {}

func (m *Measurement) GetValue() isMeasurement_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Measurement) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Measurement) GetMeasureName() string {
	if m != nil {
		return m.MeasureName
	}
	return ""
}

func (m *Measurement) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*Measurement_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Measurement) GetIntValue() int64 {
	if x, ok := m.GetValue().(*Measurement_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *Measurement) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Measurement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Measurement_OneofMarshaler, _Measurement_OneofUnmarshaler, _Measurement_OneofSizer, []interface{}{
		(*Measurement_DoubleValue)(nil),
		(*Measurement_IntValue)(nil),
	}
}

func _Measurement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Measurement)
	// value
	switch x := m.Value.(type) {
	case *Measurement_DoubleValue:
		b.EncodeVarint(3<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *Measurement_IntValue:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntValue))
	case nil:
	default:
		return fmt.Errorf("Measurement.Value has unexpected type %T", x)
	}
	return nil
}

func _Measurement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Measurement)
	switch tag {
	case 3: // value.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Measurement_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 4: // value.int_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Measurement_IntValue{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Measurement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Measurement)
	// value
	switch x := m.Value.(type) {
	case *Measurement_DoubleValue:
		n += proto.SizeVarint(3<<3 | proto.WireFixed64)
		n += 8
	case *Measurement_IntValue:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Tag)(nil), "opencensus.proto.stats.Tag")
	proto.RegisterType((*Measure)(nil), "opencensus.proto.stats.Measure")
	proto.RegisterType((*View)(nil), "opencensus.proto.stats.View")
	proto.RegisterType((*CountAggregation)(nil), "opencensus.proto.stats.CountAggregation")
	proto.RegisterType((*SumAggregation)(nil), "opencensus.proto.stats.SumAggregation")
	proto.RegisterType((*LastValueAggregation)(nil), "opencensus.proto.stats.LastValueAggregation")
	proto.RegisterType((*DistributionAggregation)(nil), "opencensus.proto.stats.DistributionAggregation")
	proto.RegisterType((*Measurement)(nil), "opencensus.proto.stats.Measurement")
	proto.RegisterEnum("opencensus.proto.stats.Measure_Type", Measure_Type_name, Measure_Type_value)
}

func init() { proto.RegisterFile("opencensus/proto/stats/stats.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x6d, 0xd6, 0x6c, 0x5d, 0x6f, 0xb7, 0x11, 0xac, 0x6a, 0x0b, 0x43, 0x68, 0x25, 0x43, 0xa8,
	0x0f, 0x34, 0x91, 0x36, 0x84, 0xe0, 0x05, 0x89, 0xae, 0x45, 0x9b, 0x34, 0x46, 0xc9, 0xba, 0x21,
	0x78, 0xa9, 0xd2, 0xd4, 0x04, 0x6b, 0x89, 0x5d, 0xc5, 0x36, 0x68, 0x7f, 0xc3, 0xb7, 0xf0, 0x21,
	0x7c, 0x0b, 0xb2, 0x9d, 0x6a, 0xcd, 0xd4, 0x08, 0x89, 0x97, 0xc6, 0x3e, 0xb9, 0xe7, 0x5c, 0x1f,
	0xe7, 0xf4, 0x82, 0xc7, 0xe6, 0x98, 0xc6, 0x98, 0x72, 0xc9, 0x83, 0x79, 0xce, 0x04, 0x0b, 0xb8,
	0x88, 0x04, 0x37, 0xbf, 0xbe, 0x46, 0xd0, 0xee, 0x5d, 0x8d, 0x41, 0x7c, 0xfd, 0x76, 0xff, 0x20,
	0x61, 0x2c, 0x49, 0xb1, 0xe1, 0x4d, 0xe5, 0xb7, 0x40, 0x90, 0x0c, 0x73, 0x11, 0x65, 0x73, 0x53,
	0xe6, 0xf5, 0xa0, 0x3e, 0x8e, 0x12, 0xe4, 0x40, 0xfd, 0x06, 0xdf, 0xba, 0x56, 0xc7, 0xea, 0x36,
	0x43, 0xb5, 0x44, 0x6d, 0x58, 0xff, 0x11, 0xa5, 0x12, 0xbb, 0x6b, 0x1a, 0x33, 0x1b, 0xef, 0xb7,
	0x05, 0x8d, 0x0f, 0x38, 0xe2, 0x32, 0xc7, 0x08, 0x81, 0x4d, 0xa3, 0x0c, 0x17, 0x24, 0xbd, 0x46,
	0x1d, 0x68, 0xcd, 0x30, 0x8f, 0x73, 0x32, 0x17, 0x84, 0xd1, 0x82, 0xbb, 0x0c, 0x29, 0x96, 0xa4,
	0x44, 0xb8, 0x75, 0xc3, 0x52, 0x6b, 0xf4, 0x1a, 0x6c, 0x71, 0x3b, 0xc7, 0xae, 0xdd, 0xb1, 0xba,
	0x3b, 0x47, 0xcf, 0xfc, 0xd5, 0x66, 0xfc, 0xa2, 0xb1, 0x3f, 0xbe, 0x9d, 0xe3, 0x50, 0x33, 0xbc,
	0x63, 0xb0, 0xd5, 0x0e, 0xb5, 0xc1, 0x19, 0x7f, 0x19, 0x0d, 0x27, 0x57, 0x17, 0x97, 0xa3, 0xe1,
	0xc9, 0xd9, 0xfb, 0xb3, 0xe1, 0xc0, 0xa9, 0xa1, 0x26, 0xac, 0x9f, 0x5d, 0x8c, 0x5f, 0xbd, 0x74,
	0x2c, 0x04, 0xb0, 0x31, 0xf8, 0x78, 0xd5, 0x3f, 0x1f, 0x3a, 0x6b, 0xde, 0x2f, 0x1b, 0xec, 0x6b,
	0x82, 0x7f, 0xfe, 0xa7, 0x83, 0x37, 0xd0, 0xc8, 0xcc, 0x49, 0xb4, 0x89, 0xd6, 0xd1, 0xc1, 0x3f,
	0x0e, 0x1c, 0x2e, 0xea, 0x91, 0x0b, 0x8d, 0x98, 0xa5, 0x32, 0xa3, 0xdc, 0xb5, 0x3b, 0xf5, 0x6e,
	0x33, 0x5c, 0x6c, 0xd1, 0x67, 0x78, 0x18, 0x33, 0x49, 0xc5, 0x24, 0x4a, 0x92, 0x1c, 0x27, 0x91,
	0x6e, 0xbe, 0xae, 0xe5, 0xbb, 0x55, 0xf2, 0x27, 0x8a, 0xf0, 0xee, 0xae, 0xfe, 0xb4, 0x16, 0x3a,
	0xf1, 0x3d, 0x0c, 0x7d, 0x82, 0x07, 0x5c, 0x66, 0x25, 0xd9, 0x0d, 0x2d, 0xfb, 0xbc, 0x4a, 0xf6,
	0x52, 0x66, 0x65, 0xd1, 0x1d, 0x5e, 0x42, 0xd0, 0x0c, 0x76, 0xd3, 0x88, 0x8b, 0x89, 0x8e, 0x44,
	0x49, 0xb9, 0xa1, 0x95, 0x5f, 0x54, 0x29, 0x9f, 0x47, 0x5c, 0x5c, 0x2b, 0x52, 0x59, 0xbf, 0x9d,
	0xae, 0xc0, 0x51, 0x0a, 0xee, 0x8c, 0x70, 0x91, 0x93, 0xa9, 0x54, 0xfb, 0x52, 0x9f, 0x4d, 0xdd,
	0x27, 0xa8, 0xea, 0x33, 0x58, 0xe2, 0x95, 0x5b, 0xed, 0xcd, 0x56, 0xbf, 0xea, 0x6f, 0x43, 0x6b,
	0xa9, 0x81, 0x87, 0xc0, 0xb9, 0x7f, 0xbb, 0x9e, 0x03, 0x3b, 0xe5, 0xab, 0xf1, 0x76, 0xa1, 0xbd,
	0xca, 0x92, 0xf7, 0x16, 0xf6, 0x2a, 0x8e, 0x80, 0x0e, 0x61, 0x7b, 0x2a, 0xe3, 0x1b, 0x2c, 0x26,
	0x53, 0x26, 0xe9, 0x8c, 0xbb, 0x56, 0xa7, 0xde, 0xb5, 0xc2, 0x2d, 0x03, 0xf6, 0x35, 0xe6, 0xfd,
	0xb1, 0xa0, 0x55, 0x64, 0x27, 0xc3, 0x54, 0xa0, 0x00, 0x6c, 0x11, 0x25, 0xa6, 0xb6, 0x75, 0xf4,
	0xb8, 0xca, 0xf6, 0x38, 0x4a, 0x42, 0x5d, 0x88, 0x9e, 0xc2, 0x56, 0x11, 0xb9, 0x89, 0x0e, 0x78,
	0x91, 0xe2, 0x02, 0xbb, 0x50, 0x39, 0x3f, 0x84, 0xad, 0x19, 0x93, 0xd3, 0x14, 0x9b, 0xcf, 0xa8,
	0xa3, 0x6c, 0x9d, 0xd6, 0xc2, 0x96, 0x41, 0xb5, 0x27, 0xf4, 0x04, 0x9a, 0x84, 0x16, 0x1f, 0x5a,
	0xff, 0x3b, 0xeb, 0xa7, 0xb5, 0x70, 0x93, 0x50, 0x63, 0x19, 0xf9, 0x60, 0xab, 0x79, 0x52, 0xe4,
	0x74, 0xdf, 0x37, 0xc3, 0xc6, 0x5f, 0x0c, 0x1b, 0x7f, 0xbc, 0x18, 0x36, 0xa1, 0xae, 0xeb, 0x37,
	0x8a, 0x99, 0xd2, 0x67, 0xf0, 0x88, 0xb0, 0x0a, 0x1b, 0x7d, 0xb8, 0x54, 0x8f, 0x91, 0x42, 0x46,
	0xd6, 0xd7, 0x41, 0x42, 0xc4, 0x77, 0x39, 0xf5, 0x63, 0x96, 0x05, 0xa6, 0xb8, 0x47, 0x28, 0x17,
	0xb9, 0x54, 0x37, 0xa3, 0xef, 0x34, 0xb8, 0xd3, 0xe9, 0x99, 0xf9, 0x98, 0x60, 0xda, 0x4b, 0x8a,
	0x31, 0x69, 0x0e, 0xb3, 0xa1, 0x1f, 0xc7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x40, 0xb5, 0x0e,
	0xfc, 0x4c, 0x05, 0x00, 0x00,
}
